{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KA0B9C,OAAS,qCAEL,uBACKC,SAnBY,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAWlB,UAEA,uBACMO,KAAO,OACbC,MAAUT,EACVU,SA5BsB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,UAqBvB,OAFK,Q,+BC5BAG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCDPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAEEqB,EDbyBK,CAAa1B,GAAhCa,EAJsB,EAI5BN,KAAca,EAJc,EAIdA,QA8BrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,aAFqC,CAEpC,EAAD,eAEQA,GADCA,EAAIC,aE3CxBgB,EAAe,WAAQ,MAGIzC,mBAAS,CAAC,cAHd,mBAGzB0C,EAHyB,KAGb3C,EAHa,KAUhC,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAMA,6BAMQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MChCjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c6da937b.chunk.js","sourcesContent":["//\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => { //Se pone entre {} setCategories porque hacemos una desestructuración\n\n    const [inputValue, setInputValue] = useState('');\n\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n\n        e.preventDefault(); // Esto evita el refresco que por defecto hace el form\n\n        if (inputValue.trim().length > 2) {\n\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n\n        }\n\n\n    }\n\n\n\n    return ( <\n        >\n        <\n        form onSubmit = { handleSubmit } >\n        <\n        input type = \"text\"\n        value = { inputValue }\n        onChange = { handleInputChange }\n        /> <\n        /form> <\n        />\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}","//\n\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=wgNNLIuJxOOB02uS07w1S2xApMJtECQX`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    // console.log(gifs);\n    return gifs;\n\n}\n","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([]);\n\n    const {data: images, loading} = useFetchGifs(category);\n\n\n    // useEffect( () => {          // Con useEffect conseguimos que no se renderice la página de modo infinito\n    //     getGifs( category )\n    //         .then( setImages );   // Poner sólo setImages es lo mismo que poner imgs => setImages ( imgs )\n    // }, [ category ])\n\n    //////// VAMOS A PASAR ESTO A UN HELPER LLAMADO getGifs.js ///////////////////////////////\n    // const getGifs = async() => {\n\n    //     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=wgNNLIuJxOOB02uS07w1S2xApMJtECQX`;\n    //     const resp = await fetch( url );\n    //     const {data} = await resp.json();\n\n    //     const gifs = data.map( img => {\n    //         return {\n    //             id: img.id,\n    //             title: img.title,\n    //             url: img.images?.downsized_medium.url\n    //         }\n    //     })\n\n    //     // console.log(gifs);\n    //     setImages(gifs);\n\n    // }\n\n    // getGifs();\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\n\n            <div className=\"card-grid\">\n                \n                {\n                    images.map( img => (                     // Después de una funcion flecha los paréntesis indican un return\n\n                        <GifGridItem \n                            key={img.id}\n                            {...img}                         // Con ... se mandan todas las propiedades de img de forma independiente\n                        />\n        \n                    ))\n                }\n                \n            </ div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {          // Con useEffect conseguimos que no se renderice la página de modo infinito\n        getGifs( category )\n            .then( imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n            });   \n    }, [ category ])\n\n    return state;       // state tiene el valor de { data:[], loading:true }\n\n}\n","//\n// import React, { Fragment } from 'react';\nimport React, { useState } from 'react';\nimport {AddCategory} from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n//import PropTypes from 'prop-types';\n\n\nexport const GifExpertApp = (  ) => {\n\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     setCategories( cats => [ ...cats, 'HunterXHunter']);\n    //     // setCategories([...categories,'HunterXHunter']);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={ setCategories }/>\n\n            <hr />\n\n            {/* <button onClick={(e) => {handleAdd(e)}}>Agregar</button> */}\n\n\n\n            <ol>\n                {\n                    // categories.map( category => {\n                    //     return <li key={category}>{category}</li>\n                    // })\n\n                    categories.map( category => (\n                        <GifGrid \n                            key={category}\n                            category={category} \n                        />\n                    ))\n\n                }\n            </ol>\n\n\n        </>\n    );\n\n    \n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}